

1. git fetch origin/branch_name    -----> pull changes but does not merge automatically with local branch like git pull

2. git merge origin/branch_name -----> to merge the changes after git fetch

3. git log -------> see logs,commit history

4. git log origin/branch_name -----> see commits on remote branch

5. git stash -----> use to save the changes to working/stagging area of current branch if we want to move to the other branch in the middle of the work

6. git stash apply ------> after comming to the old branch start from where you left your work in the middle 

7. git log --oneline ----------> show only commit hash and commit message

8. git reflog -----------> shows chronological updates and HEAD movements and other git oprations

9. git diff ----> shows changes verious commits, stagging area, working area, etc

10. git diff commitID commitID ---------> show changes made to the specific file and specific commit

11. git diff --staged ------> shows changes are in stagging area but not yet commited

12. git diff filename ------------> shows changes made to the file which is in working area now (file modified)

13. git diff branch1 branch2 -------> show diff between two branches

14. git branch ---> create branch

15. git branch -d branch_name --------> delete branch

16. git checkout -b branch_name commit_hash (by git reflog ) --------> recover deleted branch from local

17. git reset --hard origin/main -------------> forcefully discard the local changes and make local and remote branch same

18. git reset --hard commit_hash_by_git_reflog ---------------> recover deleted commit



                                  _____________________________________________________________________________________________________________________________________
                                 |                                                                                                                                     |
19. pull request --------------->|  1.  clone repo                                                                                                                     |
                                 |  2.  create branch from main like say create branch named 'harshad'                                                                 |
                                 |  3.  move on the harshad branch                                                                                                     |
                                 |  4.  do required edits                                                                                                              |
                                 |  5.  then git add & git commit                                                                                                      |
                                 |  6.  then push that branch to the remote like by using "git push origin harshad"                                                    |
                                 |  7.  then create pull request to merge changes of harshad branch to the main branch                                                 |
                                 |  8.  if there are no conflicts in the harshad branch with main branch owner of repository will approve the pull request to merge    |
                                 |  9.  after approving the pull request changes from harshad branch will be marged into the main branch                               |
                                 |  10. pull request will be closed.                                                                                                   | 
                                 |_____________________________________________________________________________________________________________________________________| 



20. "git checkout -- <file_name>" ---- to discard changes in the working directory for a specific file.

21. "git checkout -- ." ------------- to discard changes in all tracked files in the working directory

22. "git clean ." --------------------- to clean files from working directory

23. "git reset HEAD <file>" ------------- to unstage the file from stagging area

24. "git reset HEAD ." ------------------- to unstage all the files from stagging area

25. "git restore --staged <file>" --------- to unstage changes for a specific file

26. "git revert <commit_hash>" --------------  create a new commit that undoes the changes made by the specified commit

27. changes undo after wrong commit and pushed to remote :- __________________________________
                                                            | "git reflog"                    |
                                                            | "git revert <commit_ID>"        |
                                                            | "git push origin <branch_name"  |
                                                            |_________________________________|

28. if files are deleted and commited but not pushed then how to recover those files:-  _____________________________________________________________
                                                                                       | "git reflog" to get the commit hash where file were present |
                                                                                       | "git checkout <commit_hash> -- ."                           |
                                                                                       |_____________________________________________________________|


29. "git branch -r": ------------------------- list remote branches

30. "git commit --amend :- ------------------------------amend the commit

                                       __________________________________________________________________________________________________
31. solve the git conflict:--------->  |  1. "git status" ------ to see which file is with conflict"                                     |
                                       |  2. "vim <file_name>" ---- see the markers, changes on each branch will be there, decide which  |
                                       |                            change you want to keep, delete remaing changes and markers          |
                                       |  3. "git add <conflicted_file_name>"                                                            |
                                       |  4. "git commit -m "Resolve merge conflict"                                                     |
                                       |  5. "git push origin <branch_name>"                                                             |
                                       |_________________________________________________________________________________________________|

32. git rebase feature_branch main_branch:--------------------->   commits will transfer from feature_branch to main_branch seriel wise
    [ move on branch on you want                                   so that we will have all history on main branch about all commits from
     to get commits(main) from another branch(feature) ]           from feature branch.

33. git push origin --delete <remote_branch> ------>  delete the remote branch

34.git commit --amend -----------> to fix broken commit
